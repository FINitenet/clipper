import gffutils, pybedtools, os

#usage: python get_genomic_regions.py > ce10_genes.gff3

db = gffutils.FeatureDB('GENES.db')

def fix_chrM(x):
    x.chrom = x.chrom.replace("tDNA", '')
    return x

def rename(x):
    x.name = ",".join(set(x.name.split(",")))
    return x

def get_feature_locations_ce10(regions_dir, species, db):

    """

    Gets locations of genic features, five prime sites, 3 prime sites, poly a sites stop codons start codons and tss
    based off annotated gtf db file

    db - db handle generated by gtf utils

    returns dict of bedfiles     { five_prime_ends : bedtool
                                   three_prime_ends
                                   poly_a_sites
                                   stop_codons
                                   transcription_start_sites
                                }

    """

    genes = db.features_of_type('gene')
    five_prime_ends = []
    three_prime_ends = []
    poly_a_sites = []
    stop_codons = []
    start_codons = []
    transcription_start_sites = []
    count = 0
    for gene in genes:

        count += 1
        try:
            coding_length = 0
            for exon in db.children(gene, featuretype='exon'):
                if exon.strand == "+":
                    five_prime_ends.append(['chr' + exon.chrom, exon.start, exon.start, gene.attributes['sequence_name'][0], "0", gene.strand])
                    three_prime_ends.append(['chr' + exon.chrom, exon.stop, exon.stop, gene.attributes['sequence_name'][0], "0", gene.strand])
                else:
                    three_prime_ends.append(['chr' + exon.chrom, exon.start, exon.start, gene.attributes['sequence_name'][0], "0", gene.strand])
                    five_prime_ends.append(['chr' + exon.chrom, exon.stop, exon.stop, gene.attributes['sequence_name'][0], "0", gene.strand])

            for transcript in db.children(gene, featuretype='mRNA'):
                if transcript.strand == "+":
                    poly_a_sites.append(['chr' + transcript.chrom, transcript.stop, transcript.stop, gene.attributes['sequence_name'][0], "0", gene.strand])
                    transcription_start_sites.append(['chr' + transcript.chrom, transcript.start, transcript.start, gene.attributes['sequence_name'][0], "0", gene.strand])
                else:
                    poly_a_sites.append(['chr' + transcript.chrom, transcript.start, transcript.start, gene.attributes['sequence_name'][0], "0", gene.strand])
                    transcription_start_sites.append(['chr' + transcript.chrom, transcript.stop, transcript.stop, gene.attributes['sequence_name'][0], "0", gene.strand])
                try:
                    cds = list(db.children(transcript, featuretype='CDS'))
                    first, last = cds[0], cds[-1]
                    if first.strand == '-':
                        first, last = last, first
                    start_codons.append(['chr' + first.chrom, first.start, first.start, gene.attributes['sequence_name'][0], "0", first.strand])
                    stop_codons.append(['chr' + last.chrom, last.start, last.start, gene.attributes['sequence_name'][0], "0", last.strand])
                except:
                    pass

        except IndexError:
            pass
    bt = pybedtools.BedTool
    five_prime_ends = pybedtools.BedTool(five_prime_ends).sort().saveas(os.path.join(species + "_five_prime_ends.bed"))
    five_prime_ends = bt([fix_chrM(i) for i in five_prime_ends]).saveas(os.path.join(species + "_five_prime_ends.bed"))

    three_prime_ends = pybedtools.BedTool(three_prime_ends).sort().saveas(os.path.join(species + "_three_prime_ends.bed"))
    three_prime_ends = bt([fix_chrM(i) for i in three_prime_ends]).saveas(os.path.join(species + "_three_prime_ends.bed"))

    poly_a_sites = pybedtools.BedTool(poly_a_sites).sort().saveas(os.path.join(species + "_poly_a_sites.bed"))
    poly_a_sites = bt([fix_chrM(i) for i in poly_a_sites]).saveas(os.path.join(species + "_poly_a_sites.bed"))

    stop_codons = pybedtools.BedTool(stop_codons).sort().saveas(os.path.join(species + "_stop_codons.bed"))
    stop_codons = bt([fix_chrM(i) for i in stop_codons]).saveas(os.path.join(species + "_stop_codons.bed"))

    start_codons = pybedtools.BedTool(start_codons).sort().saveas(os.path.join(species + "_start_codons.bed"))
    start_codons = bt([fix_chrM(i) for i in start_codons]).saveas(os.path.join(species + "_start_codons.bed"))

    transcription_start_sites = pybedtools.BedTool(transcription_start_sites).sort().saveas(os.path.join(species + "_transcription_start_sites.bed"))
    transcription_start_sites = bt([fix_chrM(i) for i in transcription_start_sites]).saveas(os.path.join(species + "_transcription_start_sites.bed"))


    return { "five_prime_ends" : five_prime_ends,
             "three_prime_ends" : three_prime_ends,
             "poly_a_sites" :  poly_a_sites,
             "stop_codons" :  stop_codons,
             "start_codons" :  start_codons,
             "transcription_start_sites" : transcription_start_sites
            }

get_feature_locations_ce10('.', 'ce10', db)

id_to_gene = {}
mrna_to_id = {}

for x in db.features_of_type('gene'):
    id_to_gene[x.attributes['ID'][0]] = x.attributes['sequence_name'][0]
    mRNAs = db.children(x, featuretype='mRNA')
    premRNA_len = len(x)
    lns = [0,]
    for mRNA in mRNAs:
        exons = db.children(mRNA, featuretype='exon')
        this_len = sum([len(i) for i in exons])
        lns.append(this_len)
    mRNA_len = max(lns)
    if mRNA_len == 0:
        mRNA_len = premRNA_len
    x.chrom = x.chrom.replace('tDNA', '')
    print str(x).replace('sequence_name', 'gene_id') +  ';mrna_length=%d;premrna_length=%d' % (mRNA_len, premRNA_len)


for ft in db.featuretypes():
    if ft == "gene":
        continue

    for x in db.features_of_type(ft):
        mrna_to_id[x.attributes['ID'][0]] = x.attributes['Parent'][0]



_ = pybedtools.BedTool([("chr" + i.chrom.replace("tDNA", ""), i.start, i.stop, i.attributes['sequence_name'][0], '0', i.strand) for i in db.features_of_type('gene')]).sort().saveas('ce10_genes.bed')

_ = pybedtools.BedTool([("chr" + i.chrom.replace("tDNA", ""), i.start, i.stop, id_to_gene[mrna_to_id[i['Parent'][0]]], '0', i.strand) for i in db.features_of_type('three_prime_UTR')]).sort().saveas('ce10_three_prime_utrs.bed')

_ = pybedtools.BedTool([("chr" + i.chrom.replace("tDNA", ""), i.start, i.stop, id_to_gene[mrna_to_id[i['Parent'][0]]], '0', i.strand) for i in db.features_of_type('five_prime_UTR')]).sort().saveas('ce10_five_prime_utrs.bed')

_ = pybedtools.BedTool([("chr" + i.chrom.replace("tDNA", ""), i.start, i.stop, id_to_gene[mrna_to_id[i['Parent'][0]]], '0', i.strand) for i in db.features_of_type('CDS')]).sort().saveas('ce10_cds.bed')

exons = pybedtools.BedTool([("chr" + i.chrom.replace("tDNA", ""), i.start, i.stop, id_to_gene[mrna_to_id[i['Parent'][0]]], '0', i.strand) for i in db.features_of_type('exon')]).sort().saveas('ce10_exons.bed')

from clipper.src.CLIP_analysis import get_introns
introns  = get_introns(exons).sort().saveas("ce10_introns.bed")

dist = []
prox = []
dist_len = 500

for intron in introns:
    if len(intron) < dist_len * 2:
        prox.append(intron)

    else:
        up = intron
        down = intron
        middle = intron
        up.stop = up.start + dist_len
        down.start = down.stop - dist_len
        middle.start = up.stop
        middle.stop = down.start
        prox.append(up)
        prox.append(down)
        dist.append(middle)

pybedtools.BedTool(prox).sort().saveas("ce10_proxintron500.bed")
pybedtools.BedTool(dist).sort().saveas("ce10_distintron500.bed")



